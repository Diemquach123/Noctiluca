#pragma kernel GenerateData;

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

CBUFFER_START(TerrainParams)
    float heightSnap;
    float maxSlope;
CBUFFER_END

#define TILE_FLAG_STRIDE 2
#define WALL 1
#define PIT 2

struct TileData {
    uint height16_flags16;

    float Height() {
        return f16tof32(height16_flags16);
    }

    uint Flags() {
        return height16_flags16 >> 16u & 0xffff;
    }
};

struct GeneratedTile {
    uint position_encoded;
    uint2 heights_encoded;
    uint flags;

    uint3 Position() {
        return uint3(
            position_encoded & 0xF,
            position_encoded >> 8 & 0xF,
            position_encoded >> 16 & 0xF
        );
    }

    float4 Heights() {
        return float4(
            f16tof32(heights_encoded.x),
            f16tof32(heights_encoded.x >> 16u),
            f16tof32(heights_encoded.y),
            f16tof32(heights_encoded.y >> 16u)
        );
    }

    uint GetCornerFlags(const uint index) {
        return (flags >> (index * TILE_FLAG_STRIDE)) & TILE_FLAG_STRIDE;
    }

    uint VertexCount() {
        
    }

    uint TriCount() {
        
    }
};

uint3 RoomDimensions;
ByteAddressBuffer TileMap;

[numthreads(4, 4, 4)]
void GenerateData(uint3 pos : SV_DispatchThreadID) {
    if (any(pos > RoomDimensions)) return;
    
}

[numthreads(64, 1, 1)]
void GenerateMesh(uint index: SV_DispatchThreadID) {
    
}
