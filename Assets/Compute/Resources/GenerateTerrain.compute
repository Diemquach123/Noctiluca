#pragma kernel generateTerrain;

struct GeneratedVertex
{
    float3 positionOS;
    float3 normalOS;
    float2 uv;
};

RWStructuredBuffer<GeneratedVertex> _GeneratedVertices;
RWStructuredBuffer<int> _GeneratedTris;

uint3 _RoomDimensions;
StructuredBuffer<int> _HeightMap;

[numthreads(16, 16, 1)]
void generateTerrain (uint3 id : SV_DispatchThreadID) {
    if (id.x > _RoomDimensions.x || id.z > _RoomDimensions.z) { return; }
    
    const uint linearIndex = id.y * _RoomDimensions.x + id.x;
    const uint height = _HeightMap[linearIndex];
    const uint vertStart = linearIndex * 4;
    const uint triStart = linearIndex * 6;

    const float3 meshPos = float3(id.x, height, id.y);
    const float3 normal = float3(0, 1, 0);

    GeneratedVertex a;
    a.positionOS = meshPos + float3(-0.5, 0, -0.5);
    a.normalOS = normal;
    a.uv = float2(0, 0);
    const int aIndex = vertStart;
    
    GeneratedVertex b;
    b.positionOS = meshPos + float3(0.5, 0, -0.5);
    b.normalOS = normal;
    b.uv = float2(1, 0);
    const int bIndex = vertStart + 1;
    
    GeneratedVertex c;
    c.positionOS = meshPos + float3(0.5, 0, 0.5);
    c.normalOS = normal;
    c.uv = float2(1, 1);
    const int cIndex = vertStart + 2;
    
    GeneratedVertex d;
    d.positionOS = meshPos + float3(-0.5, 0, 0.5);
    d.normalOS = normal;
    d.uv = float2(0, 1);
    const int dIndex = vertStart + 3;

    _GeneratedVertices[aIndex] = a;
    _GeneratedVertices[bIndex] = b;
    _GeneratedVertices[cIndex] = c;
    _GeneratedVertices[dIndex] = d;

    _GeneratedTris[triStart] = cIndex;
    _GeneratedTris[triStart + 1] = bIndex;
    _GeneratedTris[triStart + 2] = aIndex;
    _GeneratedTris[triStart + 3] = dIndex;
    _GeneratedTris[triStart + 4] = cIndex;
    _GeneratedTris[triStart + 5] = bIndex;
}


